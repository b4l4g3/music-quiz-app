{"version":3,"sources":["helper.js","Components/Panel.js","Components/ResultPage.js","Components/App.js","serviceWorker.js","index.js"],"names":["setStateTemplate","quizData","component","questions","results","map","key","max","incorrect_answers","splice","length","Math","floor","random","correct_answer","question","answers","buttonState","questionIndex","indexOf","Wrapper","styled","div","_templateObject","Question","p","_templateObject2","AnswerWrapper","form","_templateObject3","AnswerLineContainer","label","_templateObject4","Answer","_templateObject5","CheckCircle","input","_templateObject6","props","status","Panel","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","console","log","handleChange","forEach","answer","answerIndex","comp","react_default","a","createElement","type","value","checked","Number","onChange","e","dangerouslySetInnerHTML","__html","concat","push","Component","ResultPage_templateObject","ResultsH1","ResultPage_templateObject2","Procent","ResultPage_templateObject3","ResultsH2","ResultPage_templateObject4","ResultPage","resultTexts","result","ResultPage_Wrapper","GlobalStyle","createGlobalStyle","App_templateObject","App_templateObject2","Control","App_templateObject3","Arrow","img","App_templateObject4","PageNumber","App_templateObject5","App","onSiteChanged","bind","assertThisInitialized","currentQuestionIndex","done","direction","setState","eventtarget","currentTarget","hyperstate","fetch","then","resp","json","_this2","dir","App_Wrapper","Components_ResultPage","src","onClick","changeQuestion","panels","Components_Panel","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAIMA,EAAmB,SAACC,EAAUC,GAYhC,MAAO,CACHC,UAZcF,EAASG,QAAQC,IAAI,SAAAC,GALtB,IAACC,EAOd,OADAD,EAAIE,kBAAkBC,QANRF,EAM4BN,EAASG,QAAQM,OAAO,EAL/DC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAML,KAK6B,EAAGD,EAAIQ,gBACtE,CACHC,SAAUT,EAAIS,SACdC,QAASV,EAAIE,kBACbM,eAAgBR,EAAIQ,eACpBG,YAAa,EACbC,cAAejB,EAASG,QAAQe,QAAQb,uhCCTpD,IAAMc,EAAUC,IAAOC,IAAVC,KAOPC,EAAWH,IAAOI,EAAVC,KAMRC,EAAgBN,IAAOO,KAAVC,KAKbC,EAAsBT,IAAOU,MAAVC,KAMnBC,EAASZ,IAAOI,EAAVS,KAONC,EAAcd,IAAOe,MAAVC,IASO,SAAAC,GAAK,MACJ,aAAjBA,EAAMC,OAAwB,UAAY,UAiDnCC,cA5CX,SAAAA,EAAYF,GAAO,IAAAG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMN,KAEDU,MAAQ,GAHEP,mFASfQ,QAAQC,IAAI,4CAIZ,IAAMjD,EAAW2C,KAAKN,MAAMrC,SACtBkD,EAAeP,KAAKN,MAAMa,aAC1BnC,EAAU,GAoBhB,OAnBAf,EAASe,QAAQoC,QAAQ,SAACC,GACtB,IAAMC,EAAcrD,EAASe,QAAQG,QAAQkC,GACvCE,EACFC,EAAAC,EAAAC,cAAC5B,EAAD,CACIxB,IAAKgD,EACLf,OAAQ,OAERiB,EAAAC,EAAAC,cAACvB,EAAD,CACAwB,KAAK,QACDC,MAAON,EACPO,QAASC,OAAO7D,EAASgB,eAAiBqC,EAC1CS,SAAU,SAACC,GACPb,EAAaa,EAAG/D,MAGxBuD,EAAAC,EAAAC,cAACzB,EAAD,CAAQgC,wBAAyB,CAAEC,OAAM,GAAAC,OAAKd,OAEtDrC,EAAQoD,KAAKb,KAGbC,EAAAC,EAAAC,cAACtC,EAAD,KACIoC,EAAAC,EAAAC,cAAClC,EAAD,CAAUyC,wBAAyB,CAAEC,OAAM,GAAAC,OAAKlE,EAASc,aACzDyC,EAAAC,EAAAC,cAAC/B,EAAD,KAAgBX,WAvCZqD,iTC7CpB,IAAMjD,EAAUC,IAAOC,IAAVgD,KAIPC,EAAYlD,IAAOI,EAAV+C,KAITC,EAAUpD,IAAOI,EAAViD,KAIPC,EAAYtD,IAAOI,EAAVmD,KAkCAC,mLA5BP,IAAMC,EACC,YADDA,EAEC,WAFDA,EAGC,qBAGDC,EAASnC,KAAKN,MAAMyC,OAC1B,QAAQ,GACJ,KAAMA,EAAO,EACAD,EACb,MACA,KAAMC,EAAO,EACAD,EACb,MACA,QACaA,EAGjB,OACItB,EAAAC,EAAAC,cAACsB,EAAD,KACIxB,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACe,EAAD,aACAjB,EAAAC,EAAAC,cAACiB,EAAD,cAxBSN,2wBCbzB,IAAMY,EAAcC,YAAHC,KAIX/D,EAAUC,IAAOC,IAAV8D,KAMPC,EAAUhE,IAAOC,IAAVgE,KAUPC,EAAQlE,IAAOmE,IAAVC,KAMLC,EAAarE,IAAOI,EAAVkE,KAiFDC,cA1Eb,SAAAA,EAAYtD,GAAO,IAAAG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgD,IACjBnD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkD,GAAA7C,KAAAH,KAAMN,KACDuD,cAAgBpD,EAAKoD,cAAcC,KAAnBpD,OAAAqD,EAAA,EAAArD,QAAAqD,EAAA,EAAArD,CAAAD,KACrBA,EAAKO,MAAQ,CACXgD,qBAAsB,EACtBC,MAAM,GALSxD,8EASJyD,GACbtD,KAAKuD,SAAS,SAACnD,GACb,MAAkB,UAAdkD,EACkC,GAA9BlD,EAAMgD,qBAA4B,CAACA,qBAAsBhD,EAAMgD,qBAAuB,EAAGC,MAAK,GAAQ,CAACD,qBAAsBhD,EAAMgD,qBAAuB,GAEzJ,CACLA,qBAAsBhD,EAAMgD,qBAAuB,2CAM7ChC,EAAGjD,GACf,IAAI6B,KAAKI,MAAMiD,KAAf,CACA,IAAIG,EAAcpC,EAAEqC,cAAczC,MAClChB,KAAKuD,SAAS,SAACnD,GACb,IAAMsD,EAAatD,EAEnB,OADAsD,EAAWnG,UAAUY,EAASG,eAAeD,YAAcmF,EACpDE,iDH7CO,IAACpG,IGkDL0C,KHjDZ2D,MAAM,qFACDC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAC,GACFvG,EAAUiG,SAASnG,EAAiByG,uCGiDrC,IAAAE,EAAA/D,KAEP,GADAK,QAAQ2D,IAAIhE,KAAKI,OACuB,KAApCJ,KAAKI,MAAMgD,qBACb,OACExC,EAAAC,EAAAC,cAACmD,EAAD,KACArD,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAAC2B,EAAD,KACI7B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOwB,IAAK,yBAA0BC,QAAS,kBAAML,EAAKM,eAAe,WACzEzD,EAAAC,EAAAC,cAACgC,EAAD,iCAID,GAAI9C,KAAKI,MAAM7C,UAAW,CAC/B,IAAM+G,EAAS,GAMf,OALAtE,KAAKI,MAAM7C,UAAUiD,QAAQ,SAACrC,GAC5B,IAAMwC,EACJC,EAAAC,EAAAC,cAACyD,EAAD,CAAOlH,SAAUc,EAAUoC,aAAcwD,EAAKd,gBAChDqB,EAAO9C,KAAKb,KAGZC,EAAAC,EAAAC,cAACmD,EAAD,KACErD,EAAAC,EAAAC,cAACuB,EAAD,MACCiC,EAAOtE,KAAKI,MAAMgD,sBACnBxC,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAAC6B,EAAD,CAAOwB,IAAK,yBAA0BC,QAAS,kBAAML,EAAKM,eAAe,WACzEzD,EAAAC,EAAAC,cAACgC,EAAD,KAAa9C,KAAKI,MAAMgD,qBAAuB,EAA/C,MAAqDpD,KAAKI,MAAM7C,UAAUO,QAC1E8C,EAAAC,EAAAC,cAAC6B,EAAD,CAAOwB,IAAK,0BAA2BC,QAAS,kBAAML,EAAKM,eAAe,cAMhF,OACEzD,EAAAC,EAAAC,cAACmD,EAAD,aArEUxC,aC1BE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.ec575eba.chunk.js","sourcesContent":["const randomNumber = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nconst setStateTemplate = (quizData, component) => {\r\n    const questions = quizData.results.map(key => {\r\n        key.incorrect_answers.splice(randomNumber(quizData.results.length+1), 0, key.correct_answer);\r\n        return {\r\n            question: key.question,\r\n            answers: key.incorrect_answers,\r\n            correct_answer: key.correct_answer,\r\n            buttonState: 4,\r\n            questionIndex: quizData.results.indexOf(key)\r\n\r\n        }\r\n    })\r\n    return {\r\n        questions\r\n    }\r\n}\r\n\r\nconst getQuizData = (component) => {\r\n    fetch('https://opentdb.com/api.php?amount=10&category=12&difficulty=medium&type=multiple')\r\n        .then(resp => resp.json())\r\n        .then(resp => {\r\n            component.setState(setStateTemplate(resp, component))\r\n        })\r\n}\r\n\r\nexport { getQuizData }","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    width: 80%;\r\n    margin: 15% auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst Question = styled.p`\r\n    font-family: Merriweather;\r\n    line-height: 1.5em;\r\n    font-size: 1.45em;\r\n`\r\n\r\nconst AnswerWrapper = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst AnswerLineContainer = styled.label`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: -5px 0px;\r\n`\r\n\r\nconst Answer = styled.p`\r\n    font-family: Roboto;\r\n    font-family: Roboto;\r\n    font-size: 1.25em;\r\n    margin-left: 15px;\r\n`\r\n\r\nconst CheckCircle = styled.input`\r\n    height: 25px;\r\n    width: 25px;\r\n    border: 3px solid #FF6B1D;\r\n    border-radius: 50%;\r\n    content: '';\r\n    display: inline-flex;\r\n    justify-self: center;\r\n    margin-top: 18.5px;\r\n    background-color: ${props =>\r\n        props.status === 'selected' ? \"#FF6B1D\" : \"white\"\r\n    }\r\n`\r\n\r\nclass Panel extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('mounted')\r\n    }\r\n\r\n    render() {\r\n        const quizData = this.props.quizData;\r\n        const handleChange = this.props.handleChange;\r\n        const answers = [];\r\n        quizData.answers.forEach((answer) => {\r\n            const answerIndex = quizData.answers.indexOf(answer);\r\n            const comp =\r\n                <AnswerLineContainer\r\n                    key={answerIndex}\r\n                    status={'asd'}\r\n                >\r\n                    <CheckCircle\r\n                    type=\"radio\"\r\n                        value={answerIndex}\r\n                        checked={Number(quizData.buttonState) === answerIndex} \r\n                        onChange={(e) => {\r\n                            handleChange(e, quizData);\r\n                        }}\r\n                    />\r\n                    <Answer dangerouslySetInnerHTML={{ __html: `${answer}` }}  ></Answer>\r\n                </AnswerLineContainer>;\r\n            answers.push(comp);\r\n        })\r\n        return (\r\n            <Wrapper>\r\n                <Question dangerouslySetInnerHTML={{ __html: `${quizData.question}` }}></Question>\r\n                <AnswerWrapper>{answers}</AnswerWrapper>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Panel;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n\r\n`\r\n\r\nconst ResultsH1 = styled.p`\r\n\r\n`\r\n\r\nconst Procent = styled.p`\r\n\r\n`\r\n\r\nconst ResultsH2 = styled.p`\r\n\r\n`\r\n\r\nclass ResultPage extends Component {\r\n    render() {\r\n        const resultTexts = {\r\n            a: 'Good job!',\r\n            b: 'Not bad.',\r\n            c: 'You can do better.'\r\n        }\r\n        let resultText;\r\n        const result = this.props.result;\r\n        switch (true) {\r\n            case (result<4):\r\n            resultText = resultTexts.c;\r\n            break;\r\n            case (result<7):\r\n            resultText = resultTexts.b;\r\n            break;\r\n            default:\r\n            resultText = resultTexts.a;\r\n            break;\r\n        }\r\n        return (\r\n            <Wrapper>\r\n                <ResultsH1></ResultsH1>\r\n                <Procent>Haha</Procent>\r\n                <ResultsH2></ResultsH2>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultPage;\r\n","import React, { Component } from 'react';\nimport { getQuizData } from './../helper.js';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Panel from './Panel';\nimport ResultPage from './ResultPage';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Merriweather|Roboto');\n`\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`\n\nconst Control = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  bottom: 5%;\n  width: 100%;\n`\n\nconst Arrow = styled.img`\n  width: 40px;\n  cursor: pointer;\n  margin: 30px 25px;\n`\n\nconst PageNumber = styled.p`\n  padding-bottom: 4px;\n  font-family: Roboto;\n  font-size: 18px;\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onSiteChanged = this.onSiteChanged.bind(this);\n    this.state = {\n      currentQuestionIndex: 0,\n      done: false\n    }\n  }\n\n  changeQuestion(direction) {\n    this.setState((state) => {\n      if (direction === 'right') {\n       return state.currentQuestionIndex == 9 ? {currentQuestionIndex: state.currentQuestionIndex + 1, done:true} : {currentQuestionIndex: state.currentQuestionIndex + 1};       \n      } else {\n        return {\n          currentQuestionIndex: state.currentQuestionIndex - 1,\n        }\n      }\n    })\n  }\n\n  onSiteChanged(e, question) {\n    if (this.state.done) {return}\n    let eventtarget = e.currentTarget.value;\n    this.setState((state) => {\n      const hyperstate = state;\n      hyperstate.questions[question.questionIndex].buttonState = eventtarget;\n      return hyperstate;\n    });\n  }\n\n  componentDidMount() {\n    getQuizData(this);\n  }\n\n  render() {\n    console.dir(this.state);\n    if (this.state.currentQuestionIndex === 10) {\n      return (\n        <Wrapper>\n        <ResultPage />\n        <Control>\n            <Arrow src={'./Icons/left-arrow.svg'} onClick={() => this.changeQuestion('left')} />\n            <PageNumber>Check out your answers</PageNumber>\n          </Control>\n          </Wrapper>\n      )\n    } else if (this.state.questions) {\n      const panels = [];\n      this.state.questions.forEach((question) => {\n        const comp =\n          <Panel quizData={question} handleChange={this.onSiteChanged} />;\n        panels.push(comp);\n      })\n      return (\n        <Wrapper>\n          <GlobalStyle />\n          {panels[this.state.currentQuestionIndex]}\n          <Control>\n            <Arrow src={'./Icons/left-arrow.svg'} onClick={() => this.changeQuestion('left')} />\n            <PageNumber>{this.state.currentQuestionIndex + 1} / {this.state.questions.length}</PageNumber>\n            <Arrow src={'./Icons/right-arrow.svg'} onClick={() => this.changeQuestion('right')} />\n          </Control>\n        </Wrapper>\n      );\n    }\n    else {\n      return (\n        <Wrapper></Wrapper>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}