{"version":3,"sources":["helper.js","Components/Panel.js","Components/ResultPage.js","Components/App.js","serviceWorker.js","index.js"],"names":["setStateTemplate","quizData","component","questions","results","map","key","max","incorrect_answers","splice","length","Math","floor","random","correct_answer","question","answers","questionIndex","indexOf","currentQuestionIndex","getQuizData","fetch","then","resp","json","setState","makeResults","correctAnswers","state","forEach","q","buttonState","console","dir","Wrapper","styled","div","_templateObject","Question","p","_templateObject2","AnswerWrapper","form","_templateObject3","AnswerLineContainer","label","_templateObject4","Answer","_templateObject5","CheckCircle","input","_templateObject6","props","checked","Panel","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","done","handleChange","answer","answerStyle","answerIndex","styles","color","Number","String","comp","react_default","a","createElement","status","style","type","value","onChange","e","dangerouslySetInnerHTML","__html","concat","push","Component","ResultPage_templateObject","ResultsH1","ResultPage_templateObject2","Procent","ResultPage_templateObject3","ResultsH2","ResultPage_templateObject4","ButtonContainer","ResultPage_templateObject5","Button","button","ResultPage_templateObject6","ResultPage","resultText","result","backFunc","tryAgainFunc","resultTexts","ResultPage_Wrapper","onClick","GlobalStyle","createGlobalStyle","App_templateObject","App_templateObject2","Control","App_templateObject3","Arrow","img","App_templateObject4","visible","PageNumber","App_templateObject5","App","onOptionChanged","bind","assertThisInitialized","changeQuestion","reset","direction","_this2","eventtarget","currentTarget","hyperstate","_this3","App_Wrapper","Components_ResultPage","panels","Components_Panel","src","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1939cb3.chunk.js","sourcesContent":["const randomNumber = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nconst setStateTemplate = (quizData, component) => {\r\n    const questions = quizData.results.map(key => {\r\n        key.incorrect_answers.splice(randomNumber(quizData.results.length+1), 0, key.correct_answer);\r\n        return {\r\n            question: key.question,\r\n            answers: key.incorrect_answers,\r\n            correct_answer: key.correct_answer,\r\n            questionIndex: quizData.results.indexOf(key)\r\n\r\n        }\r\n    })\r\n    return {\r\n        questions,\r\n        currentQuestionIndex: 0\r\n    }\r\n}\r\n\r\nconst getQuizData = (component) => {\r\n    fetch('https://opentdb.com/api.php?amount=10&category=12&difficulty=medium&type=multiple')\r\n        .then(resp => resp.json())\r\n        .then(resp => {\r\n            component.setState(setStateTemplate(resp, component))\r\n        })\r\n}\r\n\r\nconst makeResults = (component) => {\r\n    let correctAnswers = 0;\r\n    component.state.questions.forEach((q) => {\r\n        if (q.correct_answer === q.answers[q.buttonState]) correctAnswers++;\r\n    })\r\n    console.dir(correctAnswers)\r\n    return correctAnswers;\r\n}\r\n\r\nexport { getQuizData, makeResults }","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    width: 80%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 1rem;\r\n    @media (min-width: 400px) {\r\n        border-width: 3px;\r\n        border-style: solid;\r\n        border-image: linear-gradient( to bottom, #c95a5a, rgba(0, 0, 0, 0) ) 1 100%;\r\n    };\r\n`\r\n\r\nconst Question = styled.p`\r\n    font-family: Merriweather;\r\n    line-height: 1.5em;\r\n    font-size: 1.45em;\r\n    text-align: center;\r\n`\r\n\r\nconst AnswerWrapper = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-self: center;\r\n`\r\n\r\nconst AnswerLineContainer = styled.label`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: -5px 0px;\r\n`\r\n\r\nconst Answer = styled.p`\r\n    font-family: Roboto;\r\n    font-family: Roboto;\r\n    font-size: 1.15em;\r\n    margin-left: 15px;\r\n    width: 200px;\r\n    text-align: center;\r\n    padding-right: 15px;\r\n    cursor: pointer;\r\n`\r\n\r\nconst CheckCircle = styled.input`\r\n    appearance: none;\r\n    height: 25px;\r\n    width: 25px;\r\n    border: 3px solid #c95a5a;\r\n    border-radius: 50%;\r\n    display: inline-flex;\r\n    justify-self: center;\r\n    margin-top: 18.5px;\r\n    outline: none;\r\n    cursor: pointer;\r\n    background-color: ${props => props.checked ? '#c95a5a' : '#f6e5e491'} \r\n`\r\n\r\nclass Panel extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const done = this.props.done;\r\n        const quizData = this.props.quizData;\r\n        const handleChange = this.props.handleChange;\r\n        const answers = [];\r\n        quizData.answers.forEach((answer) => {\r\n            const answerIndex = quizData.answers.indexOf(answer);\r\n            const styles = {\r\n                correct: {\r\n                    color: 'MediumSeaGreen '\r\n                },\r\n                incorrect: {\r\n                    color: 'Crimson'\r\n                }\r\n            }\r\n            let answerStyle;\r\n            if (done && Number(quizData.buttonState)===answerIndex) {\r\n                String(quizData.correct_answer) === String(answer) ? answerStyle = styles.correct : answerStyle = styles.incorrect;\r\n            } else if (done && String(answer) === String(quizData.correct_answer) && quizData.buttonState) {\r\n                answerStyle = styles.correct;\r\n            }\r\n            // console.dir(answers[quizData.buttonState])\r\n            // console.dir(quizData.correct_answer)\r\n            const comp =\r\n                <AnswerLineContainer\r\n                    key={answerIndex}\r\n                    status={'asd'}\r\n                    style={answerStyle}\r\n                >\r\n                    <CheckCircle\r\n                    type=\"radio\"\r\n                        value={answerIndex}\r\n                        checked={Number(quizData.buttonState) === answerIndex}\r\n                        onChange={(e) => {\r\n                            handleChange(e, quizData);\r\n                        }}\r\n                    />\r\n                    <Answer dangerouslySetInnerHTML={{ __html: `${answer}` }}  ></Answer>\r\n                </AnswerLineContainer>;\r\n            answers.push(comp);\r\n        })\r\n        return (\r\n            <Wrapper>\r\n                <Question dangerouslySetInnerHTML={{ __html: `${quizData.question}` }}></Question>\r\n                <AnswerWrapper>{answers}</AnswerWrapper>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Panel;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\nheight: 100vh;\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\njustify-content: center;\r\nfont-family: Roboto;\r\n`\r\n\r\nconst ResultsH1 = styled.p`\r\nposition: fixed;\r\ntop: 25%;\r\nfont-size: 30px;\r\nfont-family: Merriweather;\r\nletter-spacing: 1px;\r\n`\r\n\r\nconst Procent = styled.p`\r\ncolor: #FF884A;\r\nfont-size: 40px;\r\nfont-weight: 600;\r\npadding-top: 50px;\r\ntext-shadow: 0.2px 0.2px 3px orange;\r\n`\r\n\r\nconst ResultsH2 = styled.p`\r\nfont-size: 20px;\r\nmargin-top: 5px;\r\n`\r\n\r\nconst ButtonContainer = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\njustify-content: center;\r\nwidth: 100%;\r\nmargin-top: 25px;\r\n`\r\n\r\nconst Button = styled.button`\r\nmargin-bottom: 10px;\r\nbackground-color: #FF6B1D;\r\nborder: 0;\r\npadding: 10px;\r\ncolor: white;\r\nborder-radius: 3px;\r\ncursor: pointer;\r\n    &:focus {\r\n        outline:0;\r\n    }\r\n    &:active {\r\n        box-shadow: inset 3px 3px 10px 1px rgba(0, 0, 0, 0.2);\r\n    }\r\n    &:hover {\r\n        background-color: #FF884A;\r\n        color: #e7e7e7;\r\n    }\r\n`\r\n\r\n\r\nclass ResultPage extends Component {\r\n    render() {\r\n        const result = this.props.result;\r\n        const backFunc = this.props.backFunc;\r\n        const tryAgainFunc = this.props.tryAgainFunc;\r\n        const resultTexts = {\r\n            a: 'Good job!',\r\n            b: 'Not bad.',\r\n            c: 'You can do better.'\r\n        }\r\n        let resultText;\r\n        switch (true) {\r\n            case (result<4):\r\n            resultText = resultTexts.c;\r\n            break;\r\n            case (result<7):\r\n            resultText = resultTexts.b;\r\n            break;\r\n            default:\r\n            resultText = resultTexts.a;\r\n            break;\r\n        }\r\n        return (\r\n            <Wrapper>\r\n                <ResultsH1>Quiz Results</ResultsH1>\r\n                <Procent>{result/10*100}%</Procent>\r\n                <ResultsH2>{resultText}</ResultsH2>\r\n                <ButtonContainer>\r\n                    <Button onClick={() => backFunc('left')}>Check out your answers</Button>\r\n                    <Button onClick={() => tryAgainFunc()}>Try Again</Button>\r\n                </ButtonContainer>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultPage;\r\n","import React, { Component } from 'react';\nimport { getQuizData, makeResults } from './../helper.js';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Panel from './Panel';\nimport ResultPage from './ResultPage';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Merriweather|Roboto');\n`\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n  background-color: #fff5ec;\n  align-items: center;\n  font-size: 16px;\n  background-image: linear-gradient(to top, #ff9e96 0%, #f5efef 100%);\n  color: #763333;\n  @media (max-width: 350px) {\n    font-size: 14px};\n  }\n}\n`\n\nconst Control = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  width: 100%;\n  bottom: 3%;\n  @media (max-width: 350px) {\n    margin-bottom: -10px;\n  }\n`\n\nconst Arrow = styled.img`\n  width: 40px;\n  cursor: pointer;\n  margin: 30px 25px;\n  visibility: ${props => props.visible===0 ? 'hidden' : 'visible'}\n  @media (max-width: 350px) {\n    width: 1.8em;\n    margin: 15px 20px;\n  }\n`\n\nconst PageNumber = styled.p`\n  padding-bottom: 4px;\n  font-family: Roboto;\n  font-size: 1.1em;\n`\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onOptionChanged = this.onOptionChanged.bind(this);\n    this.changeQuestion = this.changeQuestion.bind(this);\n    this.reset = this.reset.bind(this);\n    this.state = {\n      done: false\n    }\n  }\n\n  changeQuestion(direction) {\n    this.setState((state) => {\n      if (direction === 'right') {\n       return state.currentQuestionIndex === 9 ? {currentQuestionIndex: state.currentQuestionIndex + 1, done:true, correctAnswers: makeResults(this)} : {currentQuestionIndex: state.currentQuestionIndex + 1};       \n      } else {\n        return {\n          currentQuestionIndex: state.currentQuestionIndex - 1,\n        }\n      }\n    })\n  }\n\n  onOptionChanged(e, question) {\n    if (this.state.done) {return}\n    let eventtarget = e.currentTarget.value;\n    this.setState((state) => {\n      const hyperstate = state;\n      hyperstate.questions[question.questionIndex].buttonState = eventtarget;\n      return hyperstate;\n    });\n  }\n\n  reset() {\n    this.setState({\n      done: false\n    })\n    getQuizData(this);\n    \n  }\n\n  componentDidMount() {\n    getQuizData(this);\n  }\n\n  render() {\n    console.dir(this.state)\n    if (this.state.currentQuestionIndex === 10) {\n      return (\n        <Wrapper>\n        <ResultPage result={this.state.correctAnswers} backFunc={this.changeQuestion} tryAgainFunc={this.reset} />\n          </Wrapper>\n      )\n    } else if (this.state.questions) {\n      const panels = [];\n      this.state.questions.forEach((question) => {\n        const comp =\n          <Panel done={this.state.done} quizData={question} handleChange={this.onOptionChanged} />;\n        panels.push(comp);\n      })\n      return (\n        <Wrapper>\n          <GlobalStyle />\n          {panels[this.state.currentQuestionIndex]}\n          <Control>\n            <Arrow visible={this.state.currentQuestionIndex} src={'./Icons/left-arrow.svg'} onClick={() => this.changeQuestion('left')} />\n            <PageNumber>{this.state.currentQuestionIndex + 1} / {this.state.questions.length}</PageNumber>\n            <Arrow src={'./Icons/right-arrow.svg'} onClick={() => this.changeQuestion('right')} />\n          </Control>\n        </Wrapper>\n      );\n    }\n    else {\n      return (\n        <Wrapper></Wrapper>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}